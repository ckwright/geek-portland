<?php
/**
 * @file
 * Code for the adaptive_theme_helper feature.
 */

include_once 'adaptive_theme_helper.features.inc';

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 *
 * Removes title from footer menu in a reliable way.
 */
function adaptive_theme_helper_block_view_menu_menu_footer_menu_alter(&$data, $block) {
  unset($data['subject']);
}

/**
 * Implements hook_ds_fields_info().
 *
 * Styles author name.
 */
function adaptive_theme_helper_ds_fields_info($entity_type) {
  $fields['node']['posted_by'] = array(
    'title' => t('Posted by Author'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'function' => 'adaptive_theme_helper_ds_render_author_field',
    'properties' => array(
      'formatters' => array(
        'author' => t('Author'),
        'author_linked' => t('Author linked to profile')
      ),
    ),
  );

  return $fields;
}

/**
 * Function that adds 'Posted by' before the name of the author.
 */
function adaptive_theme_helper_ds_render_author_field ($field) {
  $author = ds_render_author_field($field);

  return t('Posted by !author', array('!author' => $author));
}


/**
 * Implement hook_field_formatter_info().
 *
 * Creates a new formatter for OG entity references.
 */
function adaptive_theme_helper_field_formatter_info() {
  return array(
    'at_list_default' => array(
      'label' => t('Separated OG audience list'),
      'field types' => array('entityreference'),
    ),
    'magnific_slideshow' => array(
      'label' => t('Magnific slideshow'),
      'field types' => array('image'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 *
 * Adds the ability to show a csv og links.
 */
function adaptive_theme_helper_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] === 'at_list_default') {
    $display['type'] = 'og_list_default';
    $nodes = og_ui_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);

    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        $render[] = render($node);
      }

      $output = '';
      $output = implode(', ', $render);
      $element[0] = array('#theme' => 'item_list', '#items' => array($output));
    }
  }
  elseif ($display['type'] === 'magnific_slideshow') {

  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function adaptive_theme_helper_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['large_image_style'] = array(
    '#title' => t('Image style of the large image'),
    '#type' => 'select',
    '#default_value' => $settings['large_image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $element['small_image_style'] = array(
    '#title' => t('Image style of the small images'),
    '#type' => 'select',
    '#default_value' => $settings['small_image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function adaptive_theme_helper_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['large_image_style']])) {
    $summary[] = t('Large image style: @style', array('@style' => $image_styles[$settings['large_image_style']]));
    $summary[] = t('Small image style: @style', array('@style' => $image_styles[$settings['small_image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Hides the default h1 (preserves the meta title) if ds shows the title.
 */
function adaptive_theme_helper_field_attach_view_alter(&$build, $context) {
  if(isset($build['#bundle']) && $context['entity_type'] == 'node' && $context['view_mode'] == 'full') {
    $field_values = ds_get_field_settings($context['entity_type'], $build['#bundle'], $context['view_mode']);

    if(isset($field_values['title'])) {
      drupal_static('hide_title', TRUE);
    }
  }
}

/**
 * Implements hook_library().
 */
function adaptive_theme_helper_library() {
  $libraries = array();

  $magnific_library_path = libraries_get_path('magnific-popup', FALSE);
  $module_path = drupal_get_path('module', 'adaptive_theme_helper');

  if (empty($magnific_library_path)) {
    drupal_set_message(t('Please install the Magnific Popup JS library.'), 'error');
    return array();
  }

  $libraries['magnific_popup'] = array(
    'title' => 'Magnific Popup jQuery Plugin',
    'website' => 'http://dimsemenov.com/plugins/magnific-popup/',
    'version' => '1',
    'js' => array(
      "{$magnific_library_path}/dist/jquery.magnific-popup.js" => array('type' => 'file'),
    ),
    'css' => array(
      "{$magnific_library_path}/dist/magnific-popup.css" => array('type' => 'file'),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  return $libraries;
}


/**
 * Internal utility function to check required library status.
 */
function _adaptive_theme_helper_check_status() {
  $jquery = drupal_get_library('system', 'jquery');
  if (empty($jquery) || empty($jquery['version'])) {
    // jQuery not available?  Totally an error condition.
    // @todo We should watchdog this, and/or report it on site status screen.
    return FALSE;
  }
  // Check if the available jQuery version is 1.7.2+.
  // @see http://dimsemenov.com/plugins/magnific-popup/documentation.html
  if (version_compare($jquery['version'], '1.7.2') < 0) {
    // $jquery['version'] is lower than 1.7.2.
    // @todo We should watchdog this, and/or report it on site status screen.
    //return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_view().
 *
 * Adds magnific to galleries.
 */
function adaptive_theme_helper_node_view($node, $view_mode, $langcode) {
  // Add Magnific Popup library to page.
  if ($view_mode == 'full') {
    drupal_add_library('adaptive_theme_helper', 'magnific_popup', FALSE);
    drupal_add_js(drupal_get_path('module', 'adaptive_theme_helper') .'/js/magnificPrep.js', 'file');
  }
}
