<?php
/**
 * @file
 * Code for the Events feature.
 */

include_once('os_event.features.inc');

/**
 * Post-render function that adds a fieldset around .
 */
function _os_event_add_fieldset($children, $elements) {
  // Default collapsed
  $collapsed = TRUE;
  $class = array('collapsible', 'collapsed');

  $fieldset['element'] = array(
    '#title' => t('Filter'),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
    '#attributes' => array('class' => $class),
    '#children' => $children,
  );

  $element_children = element_children($elements);
  foreach ($element_children as $input_name) {
    if (isset($elements[$input_name]['#default_value']) && $elements[$input_name]['#default_value'] != $elements[$input_name]['#value']) {
      // Checkboxes themed uniquely.
      if ($elements[$input_name]['#theme'] == 'radio_as_checkbox') {
        $fieldset['element']['#title'] .= '&bull;' . $elements[$input_name]['#options'][1];
      }
      // Dropdowns.
      elseif (isset($elements[$input_name]['#options'][$elements[$input_name]['#value']])) {
        $fieldset['element']['#title'] .= '&bull;' . $elements[$input_name]['#options'][$elements[$input_name]['#value']];
      }
      // Inputs.
      else {
        $fieldset['element']['#title'] .= '&bull;' . $elements[$input_name]['#value'];
      }
    }
  }

  return theme('fieldset', $fieldset);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Wraps exposed form elements in a fieldset.
 */
function os_event_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  global $base_url;

  if(isset($form_state['view']->current_display) && $form_state['view']->current_display == 'panel_pane_calendar') {
    // 1. Add fieldset dropdown.
    $form['#post_render'][] = '_os_event_add_fieldset';
    $form['#attached']['js'][] = $base_url . '/misc/form.js';
    $form['#attached']['js'][] = $base_url . '/misc/collapse.js';

    // 2. Alter weekly option to be checkbox instead of radios.
    // <input type="radio" class="form-radio" value="All" name="weekly" id="edit-weekly-all">
    // <input type="checkbox" class="form-checkbox" value="1" name="weekly">
    $form['weekly']['#theme'] = 'radio_as_checkbox';
  }
}

/**
 * Turns two radio boxes into a single checkbox.
 *
 * @see theme_radio()
 * @see theme_checkbox()
 */
function theme_radio_as_checkbox($variables) {
  $element = $variables['element'];
  $attributes = array();
  if (isset($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  $attributes['class'] = 'form-checkboxes';
  if (!empty($element['#attributes']['class'])) {
    $attributes['class'] .= ' ' . implode(' ', $element['#attributes']['class']);
  }
  if (isset($element['#attributes']['title'])) {
    $attributes['title'] = $element['#attributes']['title'];
  }

  $desired_value = 'All';

  $child['#type'] = 'checkboxes';
  $element[$desired_value]['#type'] = $element[$desired_value]['#theme'] = 'checkbox';
  $element[$desired_value]['#checked'] = $element[$desired_value]['#value'] == $element[$desired_value]['#return_value'];
  $element[$desired_value]['#title'] = $element[1]['#title'];
  $child[$desired_value] = $element[$desired_value];
  $element['#children'] = drupal_render($child);

  return '<div' . drupal_attributes($attributes) . '>' . (!empty($element['#children']) ? $element['#children'] : '') . '</div>';
}

/**
 * Implements hook_theme().
 *
 * Declares a new custom function theme_radio_as_checkbox.
 */
function os_event_theme($existing, $type, $theme, $path) {
  return array(
    'radio_as_checkbox' => array(
      'render element' => 'element',
    ),
  );
}

/**
* Implements hook_fullcalendar_api().
*/
function os_event_fullcalendar_api() {
  return array(
    'api' => fullcalendar_api_version(),
  );
}
/**
* Implements hook_fullcalendar_options_info().
*/
function os_event_fullcalendar_options_info() {
  return array(
    'os_event' => array(
      'js' => TRUE,
      'no_fieldset' => TRUE,
      'weight' => 5,
    ),
  );
}

/**
 * Renders a map link.
 *
 * @param array $field
 * @return string
 */
function os_event_render_map_link($field) {
  $output = '';
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : array();
  $settings += $field['properties']['default'];

  if(isset($field['entity']->field_location['und'][0]['entity']->field_address['und'][0])) {
    $map = $field['entity']->field_location['und'][0]['entity']->field_address['und'][0];
    $address = $map['thoroughfare'] . '+' . $map['postal_code'];
    $output = l($settings['link text'], 'http://maps.google.com?q=' . $address);
  }

  return $output;
}

/**
 * Renders an iCal link.
 *
 * @param array $field
 * @return string
 */
function os_event_render_ical_link($field) {
  $settings = isset($field['formatter_settings']) ? $field['formatter_settings'] : array();
  $settings += $field['properties']['default'];

  $output = l($settings['link text'], 'events/ical/' . $field['entity']->nid . '.ics');

  return $output;
}

/**
 * Implements hook_ds_field_format_summary().
 *
 * Seems to be needed to pull in the summary.
 */
function os_event_ds_field_format_summary($field) {
  return ds_ds_field_format_summary($field);
}

/**
 * Implements hook_ds_field_settings_form().
 *
 * Seems to be needed to pull in the settings form.
 */
function os_event_ds_field_settings_form($field) {
  return ds_ds_field_settings_form($field);
}

/**
 * Implements hook_views_data_alter().
 *
 * Overrides the text filter with my custom function.
 */
function os_event_views_data_alter(&$data) {
  $data['field_data_field_event_date']['field_event_date_rrule']['filter']['handler'] = 'os_event_handler_filter_string';
}

/**
 * Implements hook_preprocess_views_view().
 *
 * Adds cookie js support for anonymous users to save calendar view.
 */
function os_event_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if($view->plugin_name == 'fullcalendar') {
     drupal_add_library('system', 'jquery.cookie');
  }
}