<?php

/**
 * @file
 * Installation for os_base.
 */

/**
 * Implements hook_install().
 */
function os_base_install() {
  // Ensure our filters are installed.
  features_rebuild(array('os_base' => array('filter')));

  // Enable default permissions for system roles.
  $filtered_html_format = filter_format_load('filtered_html');
  $filtered_html_permission = filter_permission_name($filtered_html_format);

  // Trying to grant a non-existing permission (e.g. comment permission when
  // comment isn't active) causes a database constraint violation.
  if (module_exists('comment')) {
    user_role_grant_permissions(
      DRUPAL_ANONYMOUS_RID,
      array('access content', 'access comments', $filtered_html_permission)
    );
    user_role_grant_permissions(
      DRUPAL_AUTHENTICATED_RID,
      array(
        'access content',
        'access comments',
        'post comments',
        'skip comment approval',
        $filtered_html_permission,
      )
    );
  }
  else {
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
    user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));
  }

  if (!node_type_load('page')) {
    $t = get_t();

    // Insert default pre-defined node types into the database. For a complete
    // list of available node type attributes, refer to the node type API
    // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
    $types = array(
      array(
        'type' => 'page',
        'name' => $t('Basic page'),
        'base' => 'node_content',
        'description' => $t("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
        'custom' => 1,
        'modified' => 1,
        'locked' => 0,
      ),
    );

    foreach ($types as $type) {
      $type = node_type_set_defaults($type);
      node_type_save($type);
      node_add_body_field($type);
    }

    // We don't want to force the RDF module to be installed by declaring it
    // as a dependency -- let the install profile decide whether to enable it.
    if (module_exists('rdf')) {
      // Insert default pre-defined RDF mapping into the database.
      $rdf_mappings = array(
        array(
          'type' => 'node',
          'bundle' => 'page',
          'mapping' => array(
            'rdftype' => array('foaf:Document'),
          ),
        ),
      );
      foreach ($rdf_mappings as $rdf_mapping) {
        rdf_mapping_save($rdf_mapping);
      }
    }
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));

  // COMMENT_* defines aren't present if comment module isn't enabled, so use
  // literal value.
  variable_set('comment_page', 0 /* COMMENT_NODE_HIDDEN */);

  // Don't display date and author information for "Basic page" nodes by
  // default.
  variable_set('node_submitted_page', FALSE);

  if (!variable_get('user_admin_role', 0)) {
    // Create a default role for site administrators, with all available
    // permissions assigned.
    $admin_role = new stdClass();
    $admin_role->name = 'administrator';
    $admin_role->weight = 2;
    user_role_save($admin_role);
    user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
    // Set this as the administrator role.
    variable_set('user_admin_role', $admin_role->rid);

    // Assign user 1 the "administrator" role.
    db_insert('users_roles')
      ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
      ->execute();
  }
  // Add a custom block's body.
  $links = '<ul>
<li><a href="http://twitter.com/geekportland"><img src="/profiles/my_profile/themes/custom/geek_portland/css/images/twitter.png" alt="Twitter" /></a></li>
<li><a href="http://www.facebook.com/geekportland"><img src="/profiles/my_profile/themes/custom/geek_portland/css/images/facebook.png" alt="Facebook" /></a></li>
</ul>';
  variable_set('os_base_social_media', $links);
}

/**
 * Implements hook_update_N().
 *
 * Converts dates collected as fields into entries in related field collections.
 */
function os_base_update_7001(&$sandbox) {
  module_enable(array('field_collection'));
  features_revert(array('os_event' => array('field_base', 'field_instance')));
  $node_dates = db_select('field_data_field_event_date', 'fe')
      ->fields('fe')
      ->condition('entity_type', 'node')
      ->condition('bundle', 'event')
      ->execute();

  foreach ($node_dates as $date) {
    $node = node_load($date->entity_id);
    // Create and save field collection for node.
    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_dates'));
    $field_collection_item->setHostEntity('node', $node);
    $field_collection_item->field_event_date[LANGUAGE_NONE][0]['value'] = $date->field_event_date_value;
    $field_collection_item->field_event_date[LANGUAGE_NONE][0]['value2'] = $date->field_event_date_value2;
    $field_collection_item->field_event_date[LANGUAGE_NONE][0]['rrule'] = $date->field_event_date_rrule;
    $field_collection_item->save();
    $node->field_dates[LANGUAGE_NONE][0]['value'] = $field_collection_item->item_id;
    node_save($node);
  }

  $node_date = field_read_instance('node', 'field_event_date', 'event');
  field_delete_instance($node_date);
}

/**
 * Combines field_geek_page_type_s_ and field_event_category into field_all_geeky_interests.
 */
function os_base_update_7002(&$sandbox) {
  features_revert(array(
    'geek_pages' => array(
      'field_base',
      'field_instance',
      'search_api_index',
    )
  ));

  $geek_pages = db_select('node', 'node')
      ->fields('node')
      ->condition('type', 'geek_page')
      ->execute();

  foreach ($geek_pages as $node) {
    $node = node_load($node->nid);
    foreach ($node->field_geek_page_type_s_[LANGUAGE_NONE] as $geek_type) {
      $node->field_all_geeky_interests[LANGUAGE_NONE][] = array(
        'access' => 1,
        'entity' => entity_load_single('taxonomy_term', $geek_type['tid']),
        'target_id' => $geek_type['tid'],
      );
    }
    foreach ($node->field_event_category[LANGUAGE_NONE] as $geek_category) {
      $node->field_all_geeky_interests[LANGUAGE_NONE][] = array(
        'access' => 1,
        'entity' => entity_load_single('taxonomy_term', $geek_category['tid']),
        'target_id' => $geek_category['tid'],
      );
    }
    node_save($node);
  }

  $geek_type = field_read_instance('node', 'field_geek_page_type_s_', 'geek_page');
  field_delete_instance($geek_type);
  $geek_interests = field_read_instance('node', 'field_event_category', 'geek_page');
  field_delete_instance($geek_interests);
}

/**
 * Adds code for upgrade geek pages listing.
 */
function os_base_update_7003(&$sandbox) {
  features_revert(array(
    'geek_pages' => array('views_view'),
    'home_page' => array('views_view'),
  ));
}

/**
 * Enables geek donations page.
 */
function os_base_update_7004(&$sandbox) {
  module_enable(array('geek_donate'));
}

/**
 * Enables authcaching.
 */
function os_base_update_7005(&$sandbox) {
  module_enable(array('geek_authcache', 'admin_views'));
}

/**
 * Adds email to Events page.
 */
function os_base_update_7006(&$sandbox) {
  features_revert(array(
    'os_event' => array('field_instance'),
  ));
}

/**
 * Enables Geek User feature.
 */
function os_base_update_7007(&$sandbox) {
  module_enable(array('geek_users'));
}

/**
 * Updates users page, enables youtube and vimeo.
 */
function os_base_update_7008(&$sandbox) {
  features_revert(array('geek_users' => array('page_manager_pages', 'variable')));

  module_enable(array('media_vimeo', 'media_youtube'));
}

/**
 * Enable node_clone module.
 */
function os_base_update_7009(&$sandbox) {
  module_enable(array('node_clone'));
}
